version: "3.7"
services:
  ingress:
    image: "traefik:v2.2"
    command:
      #- "--log.level=DEBUG"

      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      # required for Let's Encrypt http challenge
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"

      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"

      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      # Let's Encrypt challenges
      - "80:80"
      # web UI
      - "8080:8080"
      # https
      - "443:443"
    volumes:
      - "certificate-data:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - ingress-network


  keycloak:
    image: jboss/keycloak:9.0.0
    labels:
      - "traefik.enable=true"

      #- "traefik.http.routers.keycloak.rule=Host(`whoami.${BASE_DOMAIN:-localtest.me}`)"
      #- "traefik.http.routers.keycloak.entrypoints=web"

      - "traefik.http.routers.keycloak.rule=Host(`keycloak.${BASE_DOMAIN:-localtest.me}`)"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.routers.keycloak.tls.certresolver=myresolver"
    command:
      - "-b"
      - "0.0.0.0"
      - "-Dkeycloak.migration.action=import"
      # todo: use dir migration provider (`keycloak.migration.provider=dir`)
      # https://github.com/keycloak/keycloak-documentation/blob/master/server_admin/topics/export-import.adoc
      - "-Dkeycloak.migration.provider=singleFile"
      - "-Dkeycloak.profile.feature.upload_scripts=enabled"
      - "-Dkeycloak.migration.file=/tmp/realm-data.json"
      - "-Dkeycloak.migration.strategy=IGNORE_EXISTING"
    environment:
      KEYCLOAK_HOSTNAME: "keycloak.${BASE_DOMAIN:-localtest.me}"
      PROXY_ADDRESS_FORWARDING: "true"
      DB_VENDOR: postgres
      DB_ADDR: db
      DB_PORT: 5432
      DB_DATABASE: keycloak
      DB_USER: postgres
      DB_PASSWORD: postgres
    volumes:
      - "./config/keycloak/realm-data.json:/tmp/realm-data.json"
    depends_on:
      - db
      - ingress
    networks:
      - ingress-network
      - internal

  db:
    image: postgres:12
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - "db-data:/var/lib/postgresql/data"
      # create keycloak and HAPI application databases
      - "./config/db:/docker-entrypoint-initdb.d"
    networks:
      - internal

  fhir:
    image: uwcirg/hapi-fhir-oauth2-starter
    environment:
      JAVA_OPTIONS: "-Dhapi.properties=/opt/hapi.properties"
      HAPI_SERVER_ADDRESS: 'https://fhir.${BASE_DOMAIN:-localtest.me}/hapi-fhir-jpaserver/fhir/'

    volumes:
      - "./config/fhir/hapi.properties:/opt/hapi.properties"
    depends_on:
      - db
      - ingress

    labels:
      - "traefik.enable=true"

      #- "traefik.http.routers.fhir.rule=Host(`whoami.${BASE_DOMAIN:-localtest.me}`)"
      #- "traefik.http.routers.fhir.entrypoints=web"

      - "traefik.http.routers.fhir.rule=Host(`fhir.${BASE_DOMAIN:-localtest.me}`)"
      - "traefik.http.routers.fhir.entrypoints=websecure"
      - "traefik.http.routers.fhir.tls.certresolver=myresolver"
    networks:
      - ingress-network
      - internal

volumes:
  db-data:
  certificate-data:

networks:
  internal:
  ingress-network:
    # override COMPOSE_PROJECT_NAME namespacing; use exact network name
    name: ingress-network
