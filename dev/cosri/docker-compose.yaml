version: "3.7"
services:
  frontend:
    image: uwcirg/cosri-summary
    environment:
      # confidential backend API endpoint
      # NB: domain is required for cookies to be set
      REACT_APP_CONF_API_URL: "https://backend.${BASE_DOMAIN:-localtest.me}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-${COMPOSE_PROJECT_NAME}.rule=Host(`frontend.${BASE_DOMAIN:-localtest.me}`)"
      - "traefik.http.routers.frontend-${COMPOSE_PROJECT_NAME}.entrypoints=websecure"
      - "traefik.http.routers.frontend-${COMPOSE_PROJECT_NAME}.tls=true"
      - "traefik.http.routers.frontend-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt"
    networks:
     - ingress

  backend:
    image: "uwcirg/sof-api-wrapper:develop"
    environment:
      SECRET_KEY: qiLYeYMJf8i7y0xU

      # client ID registered with SoF host (Keycloak)
      SOF_CLIENT_ID: cosri_openid_client
      SOF_CLIENT_SECRET: a92b4f24-82cb-4b04-baee-b933f55e2039

      PREFERRED_URL_SCHEME: https
      # ultimate destination after SoF launch and backend auth
      LAUNCH_DEST: 'https://frontend.${BASE_DOMAIN:-localtest.me}/launch.html'

      # todo: push FHIR into HAPI
      PDMP_URL: 'https://pdmp.${BASE_DOMAIN:-localtest.me}'

      # do not pass launch/patient or Epic will infer standalone launch
      SOF_CLIENT_SCOPES: "patient/*.read launch openid profile"
      SOF_ACCESS_TOKEN_URL: 'https://keycloak.${BASE_DOMAIN:-localtest.me}/auth/realms/fEMR/protocol/openid-connect/token'
      SOF_AUTHORIZE_URL: 'https://keycloak.${BASE_DOMAIN:-localtest.me}/auth/realms/fEMR/protocol/openid-connect/auth'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-${COMPOSE_PROJECT_NAME}.rule=Host(`backend.${BASE_DOMAIN:-localtest.me}`)"
      - "traefik.http.routers.backend-${COMPOSE_PROJECT_NAME}.entrypoints=websecure"
      - "traefik.http.routers.backend-${COMPOSE_PROJECT_NAME}.tls=true"
      - "traefik.http.routers.backend-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt"
    networks:
     - ingress


networks:
  # ingress network
  ingress:
    external: true
    name: external_web
