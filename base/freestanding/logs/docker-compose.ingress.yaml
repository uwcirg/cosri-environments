version: "3.7"
services:
  postgrest:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.rule=Host(`logs.${BASE_DOMAIN:-localtest.me}`)"
      - "traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.entrypoints=websecure"
      - "traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.tls=true"
      - "traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt"


      - "traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.middlewares=logserver-${COMPOSE_PROJECT_NAME}-forwardauth"
      - "traefik.http.middlewares.logserver-${COMPOSE_PROJECT_NAME}-forwardauth.forwardauth.address=http://oidc-proxy-${COMPOSE_PROJECT_NAME}:4181"
      - "traefik.http.middlewares.logserver-${COMPOSE_PROJECT_NAME}-forwardauth.forwardauth.authResponseHeaders=X-Forwarded-User"
    networks:
      - ingress
      - internal


  postgres:
    networks:
      - internal


  oidc-proxy:
    # TODO replace with better-maintained oauth2-proxy
    image: thomseddon/traefik-forward-auth:2
    command:
      # POST requests to /events are authenticated by postgrest JWT
      - --rule.post-events.action=allow
      - --rule.post-events.rule=PathPrefix(`/events`) && Method(`POST`)

    environment:
      DEFAULT_PROVIDER: oidc
      PROVIDERS_OIDC_CLIENT_ID: logserver_openid_client
      PROVIDERS_OIDC_CLIENT_SECRET: ${LOGSERVER_CLIENT_SECRET}
      PROVIDERS_OIDC_ISSUER_URL: https://keycloak.${BASE_DOMAIN}/auth/realms/fEMR

      SECRET: ${OIDC_PROXY_SECRET}
    networks:
      ingress:
        aliases:
          - oidc-proxy-${COMPOSE_PROJECT_NAME}
      internal:


networks:
  # internal network for backing services
  internal:

  # ingress network
  ingress:
    external: true
    name: external_web
