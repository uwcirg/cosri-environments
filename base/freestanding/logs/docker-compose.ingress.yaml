version: "3.7"
services:
  postgrest:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.rule=Host(`logs.${BASE_DOMAIN:-localtest.me}`)"
      - "traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.entrypoints=websecure"
      - "traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.tls=true"
      - "traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt"
    networks:
      - ingress
      - internal

  postgres:
    networks:
      - internal


  traefik-forward-auth:
    image: thomseddon/traefik-forward-auth:2
    environment:
      - PROVIDERS_GOOGLE_CLIENT_ID=your-client-id
      - PROVIDERS_GOOGLE_CLIENT_SECRET=your-client-secret
      - SECRET=something-random
      - INSECURE_COOKIE=true # Example assumes no https, do not use in production
    labels:
      - "traefik.http.middlewares.traefik-forward-auth.forwardauth.address=http://traefik-forward-auth:4181"
      - "traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders=X-Forwarded-User"
      - "traefik.http.services.traefik-forward-auth.loadbalancer.server.port=4181"

  whoami:
    image: containous/whoami
    labels:
      - "traefik.http.routers.whoami.rule=Host(`whoami.${BASE_DOMAIN:-localtest.me}`)"
      - "traefik.http.routers.whoami.middlewares=traefik-forward-auth"



networks:
  # internal network for backing services
  internal:

  # ingress network
  ingress:
    external: true
    name: external_web
